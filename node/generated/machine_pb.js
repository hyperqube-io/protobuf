/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var network_pb = require('./network_pb.js');
var util_pb = require('./util_pb.js');
goog.exportSymbol('proto.CreateMachineReply', null, global);
goog.exportSymbol('proto.CreateMachineRequest', null, global);
goog.exportSymbol('proto.GetMachineRequest', null, global);
goog.exportSymbol('proto.GetMachinesReply', null, global);
goog.exportSymbol('proto.GetMachinesRequest', null, global);
goog.exportSymbol('proto.GetVncPortReply', null, global);
goog.exportSymbol('proto.LinkNetworkReply', null, global);
goog.exportSymbol('proto.Machine', null, global);
goog.exportSymbol('proto.Machine.BootType', null, global);
goog.exportSymbol('proto.Machine.PowerState', null, global);
goog.exportSymbol('proto.MachineDisk', null, global);
goog.exportSymbol('proto.MachineDiskInput', null, global);
goog.exportSymbol('proto.MachineInterface', null, global);
goog.exportSymbol('proto.MachineNetworkRequest', null, global);
goog.exportSymbol('proto.StopMachinesRequest', null, global);
goog.exportSymbol('proto.UpdateMachineBootTypeRequest', null, global);
goog.exportSymbol('proto.UpdateMachineCpusRequest', null, global);
goog.exportSymbol('proto.UpdateMachineDisksRequest', null, global);
goog.exportSymbol('proto.UpdateMachineMemoryRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MachineDisk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MachineDisk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MachineDisk.displayName = 'proto.MachineDisk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MachineDisk.prototype.toObject = function(opt_includeInstance) {
  return proto.MachineDisk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MachineDisk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MachineDisk.toObject = function(includeInstance, msg) {
  var f, obj = {
    mounttarget: msg.getMounttarget(),
    sourcefile: msg.getSourcefile(),
    virtualsize: msg.getVirtualsize()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MachineDisk}
 */
proto.MachineDisk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MachineDisk;
  return proto.MachineDisk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MachineDisk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MachineDisk}
 */
proto.MachineDisk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMounttarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcefile(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVirtualsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.MachineDisk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MachineDisk.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MachineDisk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.MachineDisk.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMounttarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSourcefile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getVirtualsize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.MachineDisk} The clone.
 */
proto.MachineDisk.prototype.cloneMessage = function() {
  return /** @type {!proto.MachineDisk} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string mountTarget = 1;
 * @return {string}
 */
proto.MachineDisk.prototype.getMounttarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.MachineDisk.prototype.setMounttarget = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string sourceFile = 2;
 * @return {string}
 */
proto.MachineDisk.prototype.getSourcefile = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.MachineDisk.prototype.setSourcefile = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 virtualSize = 3;
 * @return {number}
 */
proto.MachineDisk.prototype.getVirtualsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.MachineDisk.prototype.setVirtualsize = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MachineInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MachineInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MachineInterface.displayName = 'proto.MachineInterface';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MachineInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.MachineInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MachineInterface} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MachineInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
    networkid: msg.getNetworkid(),
    macaddress: msg.getMacaddress()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MachineInterface}
 */
proto.MachineInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MachineInterface;
  return proto.MachineInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MachineInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MachineInterface}
 */
proto.MachineInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMacaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.MachineInterface} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MachineInterface.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MachineInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.MachineInterface.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNetworkid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMacaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.MachineInterface} The clone.
 */
proto.MachineInterface.prototype.cloneMessage = function() {
  return /** @type {!proto.MachineInterface} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string networkId = 1;
 * @return {string}
 */
proto.MachineInterface.prototype.getNetworkid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.MachineInterface.prototype.setNetworkid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string macAddress = 2;
 * @return {string}
 */
proto.MachineInterface.prototype.getMacaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.MachineInterface.prototype.setMacaddress = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Machine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Machine.repeatedFields_, null);
};
goog.inherits(proto.Machine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Machine.displayName = 'proto.Machine';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Machine.repeatedFields_ = [4,5,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Machine.prototype.toObject = function(opt_includeInstance) {
  return proto.Machine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Machine} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Machine.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    name: msg.getName(),
    powerstate: msg.getPowerstate(),
    disksList: jspb.Message.toObjectList(msg.getDisksList(),
    proto.MachineDisk.toObject, includeInstance),
    networksList: jspb.Message.toObjectList(msg.getNetworksList(),
    network_pb.Network.toObject, includeInstance),
    xml: msg.getXml(),
    boottype: msg.getBoottype(),
    cpus: msg.getCpus(),
    memory: msg.getMemory(),
    interfacesList: jspb.Message.toObjectList(msg.getInterfacesList(),
    proto.MachineInterface.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Machine}
 */
proto.Machine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Machine;
  return proto.Machine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Machine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Machine}
 */
proto.Machine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.Machine.PowerState} */ (reader.readEnum());
      msg.setPowerstate(value);
      break;
    case 4:
      var value = new proto.MachineDisk;
      reader.readMessage(value,proto.MachineDisk.deserializeBinaryFromReader);
      msg.getDisksList().push(value);
      msg.setDisksList(msg.getDisksList());
      break;
    case 5:
      var value = new network_pb.Network;
      reader.readMessage(value,network_pb.Network.deserializeBinaryFromReader);
      msg.getNetworksList().push(value);
      msg.setNetworksList(msg.getNetworksList());
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setXml(value);
      break;
    case 7:
      var value = /** @type {!proto.Machine.BootType} */ (reader.readEnum());
      msg.setBoottype(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpus(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemory(value);
      break;
    case 10:
      var value = new proto.MachineInterface;
      reader.readMessage(value,proto.MachineInterface.deserializeBinaryFromReader);
      msg.getInterfacesList().push(value);
      msg.setInterfacesList(msg.getInterfacesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Machine} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Machine.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Machine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Machine.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPowerstate();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getDisksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MachineDisk.serializeBinaryToWriter
    );
  }
  f = this.getNetworksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      network_pb.Network.serializeBinaryToWriter
    );
  }
  f = this.getXml();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getBoottype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = this.getCpus();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getMemory();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = this.getInterfacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.MachineInterface.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Machine} The clone.
 */
proto.Machine.prototype.cloneMessage = function() {
  return /** @type {!proto.Machine} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Machine.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Machine.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Machine.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Machine.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional PowerState powerState = 3;
 * @return {!proto.Machine.PowerState}
 */
proto.Machine.prototype.getPowerstate = function() {
  return /** @type {!proto.Machine.PowerState} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.Machine.PowerState} value  */
proto.Machine.prototype.setPowerstate = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated MachineDisk disks = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.MachineDisk>}
 */
proto.Machine.prototype.getDisksList = function() {
  return /** @type{!Array.<!proto.MachineDisk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MachineDisk, 4));
};


/** @param {Array.<!proto.MachineDisk>} value  */
proto.Machine.prototype.setDisksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.Machine.prototype.clearDisksList = function() {
  this.setDisksList([]);
};


/**
 * repeated Network networks = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Network>}
 */
proto.Machine.prototype.getNetworksList = function() {
  return /** @type{!Array.<!proto.Network>} */ (
    jspb.Message.getRepeatedWrapperField(this, network_pb.Network, 5));
};


/** @param {Array.<!proto.Network>} value  */
proto.Machine.prototype.setNetworksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.Machine.prototype.clearNetworksList = function() {
  this.setNetworksList([]);
};


/**
 * optional string xml = 6;
 * @return {string}
 */
proto.Machine.prototype.getXml = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.Machine.prototype.setXml = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional BootType bootType = 7;
 * @return {!proto.Machine.BootType}
 */
proto.Machine.prototype.getBoottype = function() {
  return /** @type {!proto.Machine.BootType} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {!proto.Machine.BootType} value  */
proto.Machine.prototype.setBoottype = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 cpus = 8;
 * @return {number}
 */
proto.Machine.prototype.getCpus = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.Machine.prototype.setCpus = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 memory = 9;
 * @return {number}
 */
proto.Machine.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.Machine.prototype.setMemory = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * repeated MachineInterface interfaces = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.MachineInterface>}
 */
proto.Machine.prototype.getInterfacesList = function() {
  return /** @type{!Array.<!proto.MachineInterface>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MachineInterface, 10));
};


/** @param {Array.<!proto.MachineInterface>} value  */
proto.Machine.prototype.setInterfacesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


proto.Machine.prototype.clearInterfacesList = function() {
  this.setInterfacesList([]);
};


/**
 * @enum {number}
 */
proto.Machine.PowerState = {
  UNKNOWN: 0,
  POWERED_ON: 1,
  POWERED_OFF: 2,
  SUSPENDED: 3
};

/**
 * @enum {number}
 */
proto.Machine.BootType = {
  BIOS: 0,
  UEFI: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetMachineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetMachineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetMachineRequest.displayName = 'proto.GetMachineRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetMachineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetMachineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetMachineRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetMachineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetMachineRequest}
 */
proto.GetMachineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetMachineRequest;
  return proto.GetMachineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetMachineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetMachineRequest}
 */
proto.GetMachineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetMachineRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetMachineRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetMachineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetMachineRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetMachineRequest} The clone.
 */
proto.GetMachineRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetMachineRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.GetMachineRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.GetMachineRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetVncPortReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetVncPortReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetVncPortReply.displayName = 'proto.GetVncPortReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetVncPortReply.prototype.toObject = function(opt_includeInstance) {
  return proto.GetVncPortReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetVncPortReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetVncPortReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: msg.getPort()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetVncPortReply}
 */
proto.GetVncPortReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetVncPortReply;
  return proto.GetVncPortReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetVncPortReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetVncPortReply}
 */
proto.GetVncPortReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetVncPortReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetVncPortReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetVncPortReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetVncPortReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetVncPortReply} The clone.
 */
proto.GetVncPortReply.prototype.cloneMessage = function() {
  return /** @type {!proto.GetVncPortReply} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.GetVncPortReply.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.GetVncPortReply.prototype.setPort = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetMachinesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetMachinesRequest.repeatedFields_, null);
};
goog.inherits(proto.GetMachinesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetMachinesRequest.displayName = 'proto.GetMachinesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetMachinesRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetMachinesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetMachinesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetMachinesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetMachinesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getField(msg, 1),
    fieldsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetMachinesRequest}
 */
proto.GetMachinesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetMachinesRequest;
  return proto.GetMachinesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetMachinesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetMachinesRequest}
 */
proto.GetMachinesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getIdsList().push(value);
      msg.setIdsList(msg.getIdsList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getFieldsList().push(value);
      msg.setFieldsList(msg.getFieldsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetMachinesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetMachinesRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetMachinesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetMachinesRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetMachinesRequest} The clone.
 */
proto.GetMachinesRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetMachinesRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string ids = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.GetMachinesRequest.prototype.getIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.GetMachinesRequest.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.GetMachinesRequest.prototype.clearIdsList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated string fields = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.GetMachinesRequest.prototype.getFieldsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.GetMachinesRequest.prototype.setFieldsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.GetMachinesRequest.prototype.clearFieldsList = function() {
  jspb.Message.setField(this, 2, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetMachinesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetMachinesReply.repeatedFields_, null);
};
goog.inherits(proto.GetMachinesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetMachinesReply.displayName = 'proto.GetMachinesReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetMachinesReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetMachinesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.GetMachinesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetMachinesReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetMachinesReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    machinesList: jspb.Message.toObjectList(msg.getMachinesList(),
    proto.Machine.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetMachinesReply}
 */
proto.GetMachinesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetMachinesReply;
  return proto.GetMachinesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetMachinesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetMachinesReply}
 */
proto.GetMachinesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Machine;
      reader.readMessage(value,proto.Machine.deserializeBinaryFromReader);
      msg.getMachinesList().push(value);
      msg.setMachinesList(msg.getMachinesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.GetMachinesReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetMachinesReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetMachinesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetMachinesReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMachinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Machine.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetMachinesReply} The clone.
 */
proto.GetMachinesReply.prototype.cloneMessage = function() {
  return /** @type {!proto.GetMachinesReply} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Machine machines = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Machine>}
 */
proto.GetMachinesReply.prototype.getMachinesList = function() {
  return /** @type{!Array.<!proto.Machine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Machine, 1));
};


/** @param {Array.<!proto.Machine>} value  */
proto.GetMachinesReply.prototype.setMachinesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.GetMachinesReply.prototype.clearMachinesList = function() {
  this.setMachinesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateMachineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateMachineRequest.repeatedFields_, null);
};
goog.inherits(proto.CreateMachineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateMachineRequest.displayName = 'proto.CreateMachineRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateMachineRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateMachineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateMachineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateMachineRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CreateMachineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    cpucount: msg.getCpucount(),
    memory: msg.getMemory(),
    diskpath: msg.getDiskpath(),
    xml: msg.getXml(),
    boottype: msg.getBoottype(),
    templatexml: msg.getTemplatexml(),
    disksList: jspb.Message.toObjectList(msg.getDisksList(),
    proto.MachineDiskInput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateMachineRequest}
 */
proto.CreateMachineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateMachineRequest;
  return proto.CreateMachineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateMachineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateMachineRequest}
 */
proto.CreateMachineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpucount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMemory(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiskpath(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setXml(value);
      break;
    case 6:
      var value = /** @type {!proto.Machine.BootType} */ (reader.readEnum());
      msg.setBoottype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplatexml(value);
      break;
    case 8:
      var value = new proto.MachineDiskInput;
      reader.readMessage(value,proto.MachineDiskInput.deserializeBinaryFromReader);
      msg.getDisksList().push(value);
      msg.setDisksList(msg.getDisksList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CreateMachineRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateMachineRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateMachineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateMachineRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCpucount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getMemory();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getDiskpath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getXml();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getBoottype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = this.getTemplatexml();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getDisksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.MachineDiskInput.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CreateMachineRequest} The clone.
 */
proto.CreateMachineRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.CreateMachineRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.CreateMachineRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.CreateMachineRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cpuCount = 2;
 * @return {number}
 */
proto.CreateMachineRequest.prototype.getCpucount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.CreateMachineRequest.prototype.setCpucount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 memory = 3;
 * @return {number}
 */
proto.CreateMachineRequest.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.CreateMachineRequest.prototype.setMemory = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string diskPath = 4;
 * @return {string}
 */
proto.CreateMachineRequest.prototype.getDiskpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.CreateMachineRequest.prototype.setDiskpath = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string xml = 5;
 * @return {string}
 */
proto.CreateMachineRequest.prototype.getXml = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.CreateMachineRequest.prototype.setXml = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional Machine.BootType bootType = 6;
 * @return {!proto.Machine.BootType}
 */
proto.CreateMachineRequest.prototype.getBoottype = function() {
  return /** @type {!proto.Machine.BootType} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {!proto.Machine.BootType} value  */
proto.CreateMachineRequest.prototype.setBoottype = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string templateXml = 7;
 * @return {string}
 */
proto.CreateMachineRequest.prototype.getTemplatexml = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.CreateMachineRequest.prototype.setTemplatexml = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated MachineDiskInput disks = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.MachineDiskInput>}
 */
proto.CreateMachineRequest.prototype.getDisksList = function() {
  return /** @type{!Array.<!proto.MachineDiskInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MachineDiskInput, 8));
};


/** @param {Array.<!proto.MachineDiskInput>} value  */
proto.CreateMachineRequest.prototype.setDisksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


proto.CreateMachineRequest.prototype.clearDisksList = function() {
  this.setDisksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateMachineReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateMachineReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateMachineReply.displayName = 'proto.CreateMachineReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateMachineReply.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateMachineReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateMachineReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CreateMachineReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateMachineReply}
 */
proto.CreateMachineReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateMachineReply;
  return proto.CreateMachineReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateMachineReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateMachineReply}
 */
proto.CreateMachineReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CreateMachineReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateMachineReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateMachineReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateMachineReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CreateMachineReply} The clone.
 */
proto.CreateMachineReply.prototype.cloneMessage = function() {
  return /** @type {!proto.CreateMachineReply} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.CreateMachineReply.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.CreateMachineReply.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MachineNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MachineNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MachineNetworkRequest.displayName = 'proto.MachineNetworkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MachineNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MachineNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MachineNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MachineNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    machineid: msg.getMachineid(),
    networkid: msg.getNetworkid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MachineNetworkRequest}
 */
proto.MachineNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MachineNetworkRequest;
  return proto.MachineNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MachineNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MachineNetworkRequest}
 */
proto.MachineNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMachineid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.MachineNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MachineNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MachineNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.MachineNetworkRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMachineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNetworkid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.MachineNetworkRequest} The clone.
 */
proto.MachineNetworkRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.MachineNetworkRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string machineId = 1;
 * @return {string}
 */
proto.MachineNetworkRequest.prototype.getMachineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.MachineNetworkRequest.prototype.setMachineid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string networkId = 2;
 * @return {string}
 */
proto.MachineNetworkRequest.prototype.getNetworkid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.MachineNetworkRequest.prototype.setNetworkid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LinkNetworkReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LinkNetworkReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LinkNetworkReply.displayName = 'proto.LinkNetworkReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LinkNetworkReply.prototype.toObject = function(opt_includeInstance) {
  return proto.LinkNetworkReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LinkNetworkReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.LinkNetworkReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: (f = msg.getInterface()) && proto.MachineInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LinkNetworkReply}
 */
proto.LinkNetworkReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LinkNetworkReply;
  return proto.LinkNetworkReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LinkNetworkReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LinkNetworkReply}
 */
proto.LinkNetworkReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MachineInterface;
      reader.readMessage(value,proto.MachineInterface.deserializeBinaryFromReader);
      msg.setInterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.LinkNetworkReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.LinkNetworkReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LinkNetworkReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.LinkNetworkReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MachineInterface.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.LinkNetworkReply} The clone.
 */
proto.LinkNetworkReply.prototype.cloneMessage = function() {
  return /** @type {!proto.LinkNetworkReply} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MachineInterface interface = 1;
 * @return {proto.MachineInterface}
 */
proto.LinkNetworkReply.prototype.getInterface = function() {
  return /** @type{proto.MachineInterface} */ (
    jspb.Message.getWrapperField(this, proto.MachineInterface, 1));
};


/** @param {proto.MachineInterface|undefined} value  */
proto.LinkNetworkReply.prototype.setInterface = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LinkNetworkReply.prototype.clearInterface = function() {
  this.setInterface(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.LinkNetworkReply.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StopMachinesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StopMachinesRequest.repeatedFields_, null);
};
goog.inherits(proto.StopMachinesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StopMachinesRequest.displayName = 'proto.StopMachinesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StopMachinesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StopMachinesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.StopMachinesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StopMachinesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.StopMachinesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getField(msg, 1),
    force: msg.getForce()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StopMachinesRequest}
 */
proto.StopMachinesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StopMachinesRequest;
  return proto.StopMachinesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StopMachinesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StopMachinesRequest}
 */
proto.StopMachinesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getIdsList().push(value);
      msg.setIdsList(msg.getIdsList());
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.StopMachinesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.StopMachinesRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StopMachinesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.StopMachinesRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getForce();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.StopMachinesRequest} The clone.
 */
proto.StopMachinesRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.StopMachinesRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string ids = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.StopMachinesRequest.prototype.getIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.StopMachinesRequest.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.StopMachinesRequest.prototype.clearIdsList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * optional bool force = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.StopMachinesRequest.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.StopMachinesRequest.prototype.setForce = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateMachineBootTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateMachineBootTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateMachineBootTypeRequest.displayName = 'proto.UpdateMachineBootTypeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateMachineBootTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateMachineBootTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateMachineBootTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateMachineBootTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    machineid: msg.getMachineid(),
    boottype: msg.getBoottype()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateMachineBootTypeRequest}
 */
proto.UpdateMachineBootTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateMachineBootTypeRequest;
  return proto.UpdateMachineBootTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateMachineBootTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateMachineBootTypeRequest}
 */
proto.UpdateMachineBootTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMachineid(value);
      break;
    case 2:
      var value = /** @type {!proto.Machine.BootType} */ (reader.readEnum());
      msg.setBoottype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateMachineBootTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateMachineBootTypeRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateMachineBootTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateMachineBootTypeRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMachineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBoottype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateMachineBootTypeRequest} The clone.
 */
proto.UpdateMachineBootTypeRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateMachineBootTypeRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string machineId = 1;
 * @return {string}
 */
proto.UpdateMachineBootTypeRequest.prototype.getMachineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.UpdateMachineBootTypeRequest.prototype.setMachineid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Machine.BootType bootType = 2;
 * @return {!proto.Machine.BootType}
 */
proto.UpdateMachineBootTypeRequest.prototype.getBoottype = function() {
  return /** @type {!proto.Machine.BootType} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.Machine.BootType} value  */
proto.UpdateMachineBootTypeRequest.prototype.setBoottype = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateMachineCpusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateMachineCpusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateMachineCpusRequest.displayName = 'proto.UpdateMachineCpusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateMachineCpusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateMachineCpusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateMachineCpusRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateMachineCpusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    machineid: msg.getMachineid(),
    cpus: msg.getCpus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateMachineCpusRequest}
 */
proto.UpdateMachineCpusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateMachineCpusRequest;
  return proto.UpdateMachineCpusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateMachineCpusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateMachineCpusRequest}
 */
proto.UpdateMachineCpusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMachineid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateMachineCpusRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateMachineCpusRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateMachineCpusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateMachineCpusRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMachineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCpus();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateMachineCpusRequest} The clone.
 */
proto.UpdateMachineCpusRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateMachineCpusRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string machineId = 1;
 * @return {string}
 */
proto.UpdateMachineCpusRequest.prototype.getMachineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.UpdateMachineCpusRequest.prototype.setMachineid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cpus = 2;
 * @return {number}
 */
proto.UpdateMachineCpusRequest.prototype.getCpus = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.UpdateMachineCpusRequest.prototype.setCpus = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MachineDiskInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MachineDiskInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MachineDiskInput.displayName = 'proto.MachineDiskInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MachineDiskInput.prototype.toObject = function(opt_includeInstance) {
  return proto.MachineDiskInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MachineDiskInput} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MachineDiskInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    mounttarget: msg.getMounttarget(),
    sourcefile: msg.getSourcefile()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MachineDiskInput}
 */
proto.MachineDiskInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MachineDiskInput;
  return proto.MachineDiskInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MachineDiskInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MachineDiskInput}
 */
proto.MachineDiskInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMounttarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcefile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.MachineDiskInput} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MachineDiskInput.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MachineDiskInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.MachineDiskInput.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMounttarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSourcefile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.MachineDiskInput} The clone.
 */
proto.MachineDiskInput.prototype.cloneMessage = function() {
  return /** @type {!proto.MachineDiskInput} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string mountTarget = 1;
 * @return {string}
 */
proto.MachineDiskInput.prototype.getMounttarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.MachineDiskInput.prototype.setMounttarget = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string sourceFile = 2;
 * @return {string}
 */
proto.MachineDiskInput.prototype.getSourcefile = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.MachineDiskInput.prototype.setSourcefile = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateMachineDisksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UpdateMachineDisksRequest.repeatedFields_, null);
};
goog.inherits(proto.UpdateMachineDisksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateMachineDisksRequest.displayName = 'proto.UpdateMachineDisksRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UpdateMachineDisksRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateMachineDisksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateMachineDisksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateMachineDisksRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateMachineDisksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    machineid: msg.getMachineid(),
    disksList: jspb.Message.toObjectList(msg.getDisksList(),
    proto.MachineDiskInput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateMachineDisksRequest}
 */
proto.UpdateMachineDisksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateMachineDisksRequest;
  return proto.UpdateMachineDisksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateMachineDisksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateMachineDisksRequest}
 */
proto.UpdateMachineDisksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMachineid(value);
      break;
    case 2:
      var value = new proto.MachineDiskInput;
      reader.readMessage(value,proto.MachineDiskInput.deserializeBinaryFromReader);
      msg.getDisksList().push(value);
      msg.setDisksList(msg.getDisksList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateMachineDisksRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateMachineDisksRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateMachineDisksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateMachineDisksRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMachineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDisksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MachineDiskInput.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateMachineDisksRequest} The clone.
 */
proto.UpdateMachineDisksRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateMachineDisksRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string machineId = 1;
 * @return {string}
 */
proto.UpdateMachineDisksRequest.prototype.getMachineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.UpdateMachineDisksRequest.prototype.setMachineid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated MachineDiskInput disks = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.MachineDiskInput>}
 */
proto.UpdateMachineDisksRequest.prototype.getDisksList = function() {
  return /** @type{!Array.<!proto.MachineDiskInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MachineDiskInput, 2));
};


/** @param {Array.<!proto.MachineDiskInput>} value  */
proto.UpdateMachineDisksRequest.prototype.setDisksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.UpdateMachineDisksRequest.prototype.clearDisksList = function() {
  this.setDisksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateMachineMemoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateMachineMemoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateMachineMemoryRequest.displayName = 'proto.UpdateMachineMemoryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateMachineMemoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateMachineMemoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateMachineMemoryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateMachineMemoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    machineid: msg.getMachineid(),
    memory: msg.getMemory()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateMachineMemoryRequest}
 */
proto.UpdateMachineMemoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateMachineMemoryRequest;
  return proto.UpdateMachineMemoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateMachineMemoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateMachineMemoryRequest}
 */
proto.UpdateMachineMemoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMachineid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateMachineMemoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateMachineMemoryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateMachineMemoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateMachineMemoryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMachineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMemory();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateMachineMemoryRequest} The clone.
 */
proto.UpdateMachineMemoryRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateMachineMemoryRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string machineId = 1;
 * @return {string}
 */
proto.UpdateMachineMemoryRequest.prototype.getMachineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.UpdateMachineMemoryRequest.prototype.setMachineid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 memory = 2;
 * @return {number}
 */
proto.UpdateMachineMemoryRequest.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.UpdateMachineMemoryRequest.prototype.setMemory = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto);
